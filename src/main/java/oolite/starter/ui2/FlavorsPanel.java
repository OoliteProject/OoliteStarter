/*
 */
package oolite.starter.ui2;

import java.awt.GridBagConstraints;
import java.awt.Insets;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import oolite.starter.Oolite;
import oolite.starter.Oolite2;
import oolite.starter.generic.ListAction;
import oolite.starter.model.OoliteFlavor;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * A panel to present Flavors to the user and allow him to install them.
 *
 * @author hiran
 */
public class FlavorsPanel extends javax.swing.JPanel {
    private static final Logger log = LogManager.getLogger();
    
    private transient Oolite oolite;
    private transient Oolite2 oolite2;
    
    private DefaultListModel<OoliteFlavor> model;
    private ListAction listAction;

    /**
     * Creates new form FlavorsPanel.
     */
    public FlavorsPanel() {
        log.debug("FlavorsPanel()");
        initComponents();
        
        
//        jList1.setCellRenderer(new OoliteFlavorListCellRenderer());
        
//        MouseAdapter ma = new MouseAdapter() {
//            @Override
//            public void mouseClicked(MouseEvent e) {
//                log.debug("offer install...");
//            }
//        };
//        jList1.addMouseListener(ma);

//        AbstractAction action = new AbstractAction("Install...") {
//            @Override
//            public void actionPerformed(ActionEvent ae) {
//                log.debug("actionPerformed(...)");
//                OoliteFlavor flavor = jList1.getSelectedValue();
//                if (flavor == null) {
//                    return;
//                }
//                log.warn("Install flavor {} from {}...", flavor.getName(), flavor.getExpansionSetUrl());
//                
//                try {
//                    NodeList nl = oolite.parseExpansionSet(flavor.getExpansionSetUrl());
//                    log.warn("Parsed expansion set {}", flavor.getExpansionSetUrl());
//                    
//                    List<Command> plan = oolite.buildCommandList(oolite2.getExpansions(), nl);
//                    
//                    if (plan.isEmpty()) {
//                        JOptionPane.showConfirmDialog(FlavorsPanel.this, "We're already there, kiddo.");
//                    } else  {
//                        // have user approve the plan
//                        if (JOptionPane.showConfirmDialog(FlavorsPanel.this, Util.createCommandListPanel(plan), "Confirm these actions...", JOptionPane.OK_CANCEL_OPTION)==JOptionPane.OK_OPTION) {
//                            // execute the plan
//                            ExpansionManager.getInstance().addCommands(plan);
//                            MrGimlet.showMessage(FlavorsPanel.this, "Working on it...");
//                        }
//                    }
//                } catch (Exception e) {
//                    log.error("Could not install expansion set");
//                }
//            }
//        };
//        listAction = new ListAction(jList1, action);
    }
    
    /**
     * Sets the oolite instance to retrieve data from.
     * 
     * @param oolite the instance
     */
    public void setOolite(Oolite oolite, Oolite2 oolite2) {
        log.debug("setOolite({}, {})", oolite, oolite2);
        this.oolite = oolite;
        this.oolite2 = oolite2;

        try {
            for (OoliteFlavor flavor: oolite.getFlavorList()) {
                OoliteFlavorListCellRenderer oflc = new OoliteFlavorListCellRenderer();
                oflc.setOolite(oolite, oolite2);
                oflc.setData(flavor);
                jPanel1.add(oflc);
            }
        
//            model = new DefaultListModel<>();
//            model.addAll(oolite.getFlavorList());        
//            jList1.setModel(model);
        } catch (Exception e) {
            log.error("Could not load flavors", e);
            model = null;
            
            remove(jScrollPane1);
            add(new JLabel("Could not load flavors.", SwingConstants.CENTER), new GridBagConstraints(0, 0, 1, 1, 1.0d, 1.0d, GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0,0,0,0), 0, 0));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jLabel1, gridBagConstraints);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));
        jScrollPane1.setViewportView(jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        add(jScrollPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

/*
 */
package oolite.starter.ui;

import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import javax.swing.JOptionPane;
import javax.swing.UIDefaults;
import javax.swing.UIManager;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import oolite.starter.Configuration;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Allows a user whether and what/how MQTT server to use.
 *
 * @author hiran
 */
public class MqttPanel extends javax.swing.JPanel {
    private static final Logger log = LogManager.getLogger();
    
    private static final String MQTTPANEL_COULD_NOT_SAVE = "Could not save configuration.";
    
    private Configuration configuration;
    
    private boolean isDirty = false;
    private boolean passwordDirty = false;
    private int updating = 0;
    
    private void setButtonColor() {
        if (configuration != null && configuration.isDirty()) {
            btSave.setBackground(Configuration.COLOR_ATTENTION);
        } else {
            UIDefaults uidefaults = UIManager.getLookAndFeelDefaults();
            Color defaultBackground = uidefaults.getColor("Button.background");
            btSave.setBackground(defaultBackground);
        }
    }
    
    private void setConfigDirty(boolean dirty) {
        isDirty = dirty;
        configuration.setDirty(dirty);
        setButtonColor();
    }
    
    private void changed() {
        if (updating != 0) {
            return;
        }
        
        log.debug("changed()");
        setConfigDirty(true);
    }

    /**
     * Creates new form MqttPanel.
     */
    public MqttPanel() {
        initComponents();
        
        cbUseMqtt.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent ie) {
                log.debug("itemStateChanged({})", ie);
                tfBrokerUrl.setEnabled(cbUseMqtt.isSelected());
                tfUsername.setEnabled(cbUseMqtt.isSelected());
                tfPassword.setEnabled(cbUseMqtt.isSelected());
                changed();
            }
        });
        
        DocumentListener dl = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent de) {
                changed();
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                changed();
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                changed();
            }
        };
        tfBrokerUrl.getDocument().addDocumentListener(dl);
        tfUsername.getDocument().addDocumentListener(dl);
        tfPassword.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent de) {
                passwordDirty = true;
                changed();
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                passwordDirty = true;
                changed();
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                passwordDirty = true;
                changed();
            }
        });
    }

    /**
     * Sets the current configuration.
     * 
     * @param configuration 
     */
    public void setConfiguration(Configuration configuration) {
        this.configuration = configuration;
        
        updating++;
        
        if (configuration.hasMqttData()) {
            cbUseMqtt.setSelected(true);
            tfBrokerUrl.setEnabled(true);
            tfBrokerUrl.setText(configuration.getMqttBrokerUrl());
            tfUsername.setEnabled(true);
            tfUsername.setText(configuration.getMqttUser());
            tfPassword.setEnabled(true);
        } else {
            cbUseMqtt.setSelected(false);
            tfBrokerUrl.setEnabled(false);
            tfBrokerUrl.setText("");
            tfUsername.setEnabled(false);
            tfUsername.setText("");
            tfPassword.setEnabled(false);
        }
        
        updating--;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbUseMqtt = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfBrokerUrl = new javax.swing.JTextField();
        tfUsername = new javax.swing.JTextField();
        tfPassword = new javax.swing.JPasswordField();
        btSave = new javax.swing.JButton();

        cbUseMqtt.setText("Use MQTT");

        jLabel1.setText("Broker URL");

        jLabel2.setText("Username");

        jLabel3.setText("Password");

        tfBrokerUrl.setText("jTextField1");

        tfUsername.setText("jTextField2");

        tfPassword.setText("jPasswordField1");

        btSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/download_FILL0_wght400_GRAD0_opsz24.png"))); // NOI18N
        btSave.setText("Save");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbUseMqtt)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfUsername)
                            .addComponent(tfBrokerUrl)
                            .addComponent(tfPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btSave)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbUseMqtt)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfBrokerUrl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(95, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        log.debug("btSaveActionPerformed({})", evt);
        
        try {
            if (cbUseMqtt.isSelected()) {
                configuration.setMqttBrokerUrl(tfBrokerUrl.getText());
                configuration.setMqttUser(tfUsername.getText());
                if (passwordDirty) {
                    configuration.setMqttPassword(tfPassword.getPassword());
                    passwordDirty = false;
                }
            } else {
                configuration.setMqttBrokerUrl(null);
                configuration.setMqttUser(null);
                configuration.setMqttPassword(null);
            }
            
            File f = configuration.getDefaultConfigFile();
            configuration.saveConfiguration(f);
            
            setConfigDirty(false);
        } catch (Exception e) {
            log.error(MQTTPANEL_COULD_NOT_SAVE, e);
            JOptionPane.showMessageDialog(this, MQTTPANEL_COULD_NOT_SAVE);
        }        
    }//GEN-LAST:event_btSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSave;
    private javax.swing.JCheckBox cbUseMqtt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField tfBrokerUrl;
    private javax.swing.JPasswordField tfPassword;
    private javax.swing.JTextField tfUsername;
    // End of variables declaration//GEN-END:variables
}
